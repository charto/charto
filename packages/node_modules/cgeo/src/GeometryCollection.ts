// This file is part of cgeo, copyright (c) 2017 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import { Geometry, GeometryKind, registerType } from './Geometry';
import { PointSpec } from './Point';

export class GeometryCollection<Member extends (Geometry | null | undefined) = Geometry> extends Geometry {

	constructor(childList?: Member[]) {
		super();

		for(let child of (childList || [])) this.addChild(child);
	}

	addChild(child: Member) {
		if(child) {
			if(child.hasZ()) this.flagZ = true;
			if(child.hasM()) this.flagM = true;

			const dimension = child.dimension;
			if(dimension && dimension > this.dimension!) this.dimension = dimension;

			if(child.kind == this.kind) {
				for(let grand of (child as any as GeometryCollection<Member>).childList) {
					this.childList.push(grand);
				}
			} else {
				child.parent = this;
				this.childList.push(child);
			}
		} else {
			this.childList.push(child);
		}
	}

	clone() {
		return(new (this.constructor as any)(
			this.childList.map(
				(child) => child && child.clone()
			)
		));
	}

	transform(handler: (pt: PointSpec) => void, pt: PointSpec = {}) {
		for(let child of this.childList) {
			if(child) child.transform(handler, pt);
		}

		return(this);
	}

	hasZ() { return(this.flagZ == true); }
	hasM() { return(this.flagM == true); }

	childList: Member[] = [];
	/** Optional ID of each child. */
	childIDList?: number[];

	dimension? = 0;
	flagZ?: boolean;
	flagM?: boolean;

}

registerType(GeometryCollection, GeometryKind.geometryCollection);
