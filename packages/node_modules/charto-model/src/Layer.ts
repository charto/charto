// This file is part of charto-model, copyright (c) 2017 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import { IObservableArray } from 'mobx';
import { types as T, detach, IModelType, ISnapshottable, IComplexType } from 'mobx-state-tree';
import { mst, shim, action, ModelInterface } from 'classy-mst';

import { BBox } from './frozen/BBox';

export type Feature = any;

export type LayerFeatures = { layer: Layer, features: Feature[] }[];
export type LayerFeaturesPromise = LayerFeatures | Promise<LayerFeatures>;

let defaultID = 1;

export const LayerData = shim(T.model({
	id: T.optional(T.string, () => 'layer-' + defaultID++),
	name: '',
	visible: true
}));

export class LayerCode extends LayerData {

	@action
	detach(layer: Layer) { detach(layer); }

	@action
	show() { this.visible = true; }

	@action
	hide() { this.visible = false; }

	@action
	expand() { this.expanded = true; }

	@action
	collapse() { this.expanded = false; }

	@action
	set(snapshot: { [key: string]: any }) {
		for(let key in snapshot) {
			(this as { [key: string]: any })[key] = snapshot[key];
		}
	}

	getLayerFeatures(bbox: BBox, tileNS?: number, tileEW?: number, pixelWidth?: number, pixelHeight?: number): LayerFeaturesPromise {
		return([]);
	}

	children?: Layer[];

	expanded: boolean;

}

export const BaseLayer = mst(LayerCode, LayerData);
export type BaseLayer = typeof BaseLayer.Type;

// Interface trickery to avoid compiler errors when defining a recursive type.
export interface ObservableLayerArray extends IObservableArray<GroupLayer> {}
export interface GroupLayer extends BaseLayer { children: ObservableLayerArray }
export interface LayerArrayType extends IComplexType<(typeof BaseLayer.SnapshotType & { children: any[] })[], ObservableLayerArray> {}

export const Layer = BaseLayer.props({
	children: T.maybe(T.array(T.late((): any => Layer)) as LayerArrayType),
});

export type Layer = typeof Layer.Type;
