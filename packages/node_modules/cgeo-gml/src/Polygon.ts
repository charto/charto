// This file is part of cgeo-gml, copyright (c) 2017 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import * as cgeo from 'cgeo';
import { TokenElement } from 'cxml';
import { WriteState } from './Geometry';
import { GeometryCollection } from './GeometryCollection';
import { Parser } from './Parser';

@cgeo.mixin()
export class Polygon extends cgeo.Polygon {

	writeGML(state: WriteState, element = state.gml.Polygon) {
		const { gml, buffer } = state;

		let topo = gml.exterior;

		buffer.push(
			element,
			element.emitted,
		);

		for(let child of this.childList) {
			if(child) {
				buffer.push(topo, topo.emitted);

				if(child.kind == cgeo.GeometryKind.lineString) {
					child.writeGML(state, gml.LinearRing);
				} else {
					buffer.push(gml.Ring, gml.Ring.emitted);
					child.writeGML(state);
					buffer.push(gml.Ring.close);
				}

				buffer.push(topo.close);
			}

			topo = gml.interior;
		}

		buffer.push(
			element.close
		);
	}

	static initGML(parser: Parser<any>) {
		GeometryCollection.initGML(parser);
	}

	static finishGML(parser: Parser<any>): cgeo.Polygon | cgeo.CurvePolygon | null {
		const childList = parser.childList;
		if(!childList) return(null);

		parser.childList = parser.childListStack.pop();

		let num = childList.length;

		while(num--) {
			const child = childList[num];

			if(child && child.kind != cgeo.GeometryKind.lineString) break;
		}

		return(num < 0 ? new cgeo.Polygon(childList) : new cgeo.CurvePolygon(childList));
	}

}
