// This file is part of cgeo-gml, copyright (c) 2017 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import * as cgeo from 'cgeo';
import { Token, TokenBuffer, TokenElement, ElementToken, AttributeToken, ParserConfig } from 'cxml';
import { ConfigGML } from './ConfigGML';
import { Parser } from './Parser';

export class WriteState {

	constructor(public config: ConfigGML) {}

	buffer: TokenBuffer;
	flipXY = this.config.flipXY;
	gml = this.config.gml;

}

export type This = Geometry & cgeo.Geometry;

@cgeo.mixin(cgeo.Geometry as any as { new(): cgeo.Geometry })
export class Geometry {

	writeGML(this: This, state: WriteState, element?: TokenElement) {}

	toGML(this: This, config: ConfigGML) {
		const state = new WriteState(config);
		state.buffer = [];

		this.writeGML(state);

		return(state.buffer);
	}

	static initGML(parser: Parser<any>, token: ElementToken) {}
	static finishGML(parser: Parser<any>, token: ElementToken): This | null { return(null); }

/*
	static readGML(state: State): cgeo.Geometry {
		const buffer = state.buffer;
	}

	static fromGML(options?: OptionsGML): cgeo.Geometry {
		const state = new State(options);

		return(Geometry.readGML(state));
	}
*/

}
