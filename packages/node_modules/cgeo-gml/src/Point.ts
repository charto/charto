// This file is part of cgeo-gml, copyright (c) 2017 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import * as cgeo from 'cgeo';
import { WriteState } from './Geometry';
import { Parser } from './Parser';

const empty: number[] = [];

@cgeo.mixin()
export class Point extends cgeo.Point {

	writeGML(state: WriteState) {
		const { gml, buffer } = state;
		const hasZ = this.z !== void 0;
		const hasM = this.m !== void 0;
		const dimension = 2 + (+hasZ) + (+hasM);
		let pt: string;

		if(state.flipXY) {
			pt = this.y + ' ' + this.x;
		} else {
			pt = this.x + ' ' + this.y;
		}

		if(hasZ) pt += ' ' + this.z;
		if(hasM) pt += ' ' + this.m;

		buffer.push(
			gml.Point,
			gml.Point.emitted,
			gml.pos,
		);

		if(dimension != 2) {
			buffer.push(
				gml.srsDimension,
				dimension
			);
		}

		buffer.push(
			gml.pos.emitted,
			pt,
			gml.pos.close,
			gml.Point.close
		);
	}

	static initGML(parser: Parser<any>) {
		const x: number[] = [];
		const y: number[] = [];

		parser.coordList = { x, y };
		parser.target = [ x, y ];
	}

	static finishGML(parser: Parser<any>): cgeo.Point | null {
		const coordList = parser.coordList;

		if(!coordList) return(null);

		parser.coordList = void 0;

		return(new cgeo.Point(
			(coordList.x || empty)[0],
			(coordList.y || empty)[0],
			(coordList.z || empty)[0],
			(coordList.m || empty)[0]
		));
	}

}
