// This file is part of cgeo-gml, copyright (c) 2017 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import * as cgeo from 'cgeo';
import { OpenToken, TokenElement } from 'cxml';
import { WriteState } from './Geometry';
import { Parser } from './Parser';
import { Point } from './Point';

@cgeo.mixin()
export class LineString extends cgeo.LineString {

	writeGML(state: WriteState, element = state.gml.LineString) {
		const { gml, buffer } = state;
		const { x, y, z, m } = this;
		const content: string[] = [];
		const count = x.length;
		let pt: string;

		for(let num = 0; num < count; ++num) {
			if(state.flipXY) {
				pt = y[num] + ' ' + x[num];
			} else {
				pt = x[num] + ' ' + y[num];
			}

			content.push(pt);
		}

		buffer.push(
			element,
			element.emitted,
			gml.posList,
			gml.posList.emitted,
			content.join(' '),
			gml.posList.close,
			element.close
		);
	}

	static initGML(parser: Parser<any>) {
		Point.initGML(parser);
	}

	static finishGML(parser: Parser<any>): cgeo.LineString | null {
		const coordList = parser.coordList;

		if(!coordList) return(null);

		parser.coordList = void 0;

		return(new cgeo.LineString(coordList));
	}

}
