// This file is part of cgeo-gml, copyright (c) 2017 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import * as cxml from 'cxml';
import * as cgeo from 'cgeo';
import { WriteState } from './Geometry';
import { GeometryCollection } from './GeometryCollection';
import { Parser } from './Parser';

@cgeo.mixin()
export class CompoundCurve extends cgeo.CompoundCurve {

	writeGML(state: WriteState) {
		// return(GeometryCollection.prototype.writeGML.call(this, state));

		const element = state.config.elementTbl[this.kind];
		const member = state.config.memberTbl[this.kind];
		const { gml, buffer } = state;

		buffer.push(element, element.emitted, member, member.emitted);

		for(let child of this.childList) {
			if(child) {
				if(child.kind == cgeo.GeometryKind.lineString) {
					child.writeGML(state, gml.LineStringSegment);
				} else {
					child.writeGML(state);
				}
			}
		}

		buffer.push(member.close, element.close);
	}

	static initGML(parser: Parser<any>) {
		GeometryCollection.initGML(parser);
	}

	static finishGML(parser: Parser<any>, token: cxml.ElementToken): GeometryCollection | null {
		return(GeometryCollection.finishGML(parser, token));
	}

}
