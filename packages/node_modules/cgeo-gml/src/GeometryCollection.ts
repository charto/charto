// This file is part of cgeo-gml, copyright (c) 2017 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import * as cxml from 'cxml';
import * as cgeo from 'cgeo';
import { Geometry, WriteState } from './Geometry';
import { Parser } from './Parser';

@cgeo.mixin()
export class GeometryCollection extends cgeo.GeometryCollection<(Geometry & cgeo.Geometry) | null> {

	writeGML(state: WriteState) {
		const element = state.config.elementTbl[this.kind];
		const member = state.config.memberTbl[this.kind];
		const { gml, buffer } = state;

		buffer.push(element, element.emitted, member, member.emitted);

		for(let child of this.childList) {
			if(child) child.writeGML(state);
		}

		buffer.push(member.close, element.close);
	}

	static initGML(parser: Parser<any>) {
		if(parser.childList) parser.childListStack.push(parser.childList);
		parser.childList = [];
	}

	static finishGML(parser: Parser<any>, token: cxml.ElementToken): GeometryCollection | null {
		const childList = parser.childList;

		if(!childList) return(null);

		parser.childList = parser.childListStack.pop();

		const TypeHandler = parser.config.geometryTbl[token.id] as typeof cgeo.GeometryCollection;

		return(new TypeHandler(childList));
	}

}
