// This file is part of cgeo-shp, copyright (c) 2018 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import * as cgeo from 'cgeo';
import { Reader, Writer, Endian } from 'cbin';

export interface OptionsSHP {
	flipXY?: boolean;
}

export class State implements OptionsSHP {

	constructor(options: OptionsSHP = {}, geom?: Geometry & cgeo.Geometry) {
		this.flipXY = options.flipXY || false;

		if(geom) {
			if(geom.hasZ()) { this.hasZ = true; this.kindOffset = 10; }
			if(geom.hasM()) { this.hasM = true; if(!this.hasZ) this.kindOffset = 20; }
		}
	}

	flipXY: boolean;
	hasZ: boolean;
	hasM: boolean;
	kindOffset = 0;

	reader: Reader;
	writer: Writer;

}

export const shpTypeList: ({ new(): Geometry } | null)[] = [];

export function registerType(Type: { new(): Geometry }, kind: number) {
	shpTypeList[kind] = Type;
}

export type This = Geometry & cgeo.Geometry;

@cgeo.mixin(cgeo.Geometry as any as { new(): cgeo.Geometry })
export class Geometry {

	measureWKB(this: This, state: State) { return(0); }

	readWKB(this: This, state: State) {}

	writeWKB(this: This, state: State) {}

}
