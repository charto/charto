// This file is part of charto-model, copyright (c) 2017 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import { SRS } from './SRS';

export interface BBoxLike {
	s: number;
	w: number;
	n: number;
	e: number;
}

export class BBox implements BBoxLike {

	constructor(
		public readonly s: number,
		public readonly w: number,
		public readonly n: number,
		public readonly e: number,
		public readonly srs?: number
	) {}

	static fromArray(spec: (number | string)[], srs: SRS) {
		if(srs.oldXY) {
			// Helsinki: 24,60,24,60,epsg:4326
			return(new BBox(+spec[1], +spec[0], +spec[3], +spec[2], srs.epsg));
		} else {
			// Helsinki: 60,24,60,24,urn:ogc:def:crs:epsg::4326
			return(new BBox(+spec[0], +spec[1], +spec[2], +spec[3], srs.epsg));
		}
	}

	static sqDistTo(this: any, x: number, y: number, bbox: BBoxLike = this) {
		let dx = 0, dy = 0;

		if(x < bbox.s) dx = x - bbox.s;
		else if(x > bbox.n) dx = x - bbox.n;

		if(y < this.w) dy = y - bbox.w;
		else if(y >= this.e) dy = y - bbox.e;

		return(dx * dx + dy * dy);
	}

	toArray(oldXY = false) {
		if(oldXY) return([this.w, this.s, this.e, this.n, this.srs]);
		else return([this.s, this.w, this.n, this.e, this.srs]);
	}

	clone() {
		return(new BBox(this.s, this.w, this.n, this.e, this.srs));
	}

	sqDistTo: (x: number, y: number) => number;

	area() {
		return((this.n - this.s) * (this.e - this.w));
	}

	extended(lat: number, lon: number) {
		const { s, w, n, e } = this;

		return(new BBox(
			lat < s ? lat : s,
			lon < w ? lon : w,
			lat > n ? lat : n,
			lon > e ? lon : e,
			this.srs
		));
	}

}

BBox.prototype.sqDistTo = BBox.sqDistTo;
