// This file is part of cgeo-cpak, copyright (c) 2017 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import * as cgeo from 'cgeo';
import { decodeSign, encodeSign } from 'cpak';
import { State } from './Geometry';
import { Point } from './Point';

@cgeo.mixin()
export class MultiPoint extends cgeo.MultiPoint {

	writeCpak(state: State) {
		const writer = state.writer;
		let x: number, y: number, z: number, m: number;

		writer.small(this.childList.length);

		for(let child of this.childList) {
			x = ~~(child.x * state.inverse);
			y = ~~(child.y * state.inverse);

			writer.large(encodeSign(x - state.x));
			writer.large(encodeSign(y - state.y));

			state.x = x;
			state.y = y;
		}
	}

	readCpak(state: State) {
		const reader = state.reader;
		let count = reader.small();

		let x = state.x;
		let y = state.y;

		while(count--) {
			x += decodeSign(reader.large());
			y += decodeSign(reader.large());

			this.addChild(new Point(x * state.precision, y * state.precision));
		}

		state.x = x;
		state.y = y;
	}

}
