// This file is part of cmath, copyright (c) 2017-2018 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import { BigFloat } from 'bigfloat';

/** Calculate sign of the 2D cross product AKA perp dot product AKA 2x2 matrix
  * determinant. Always correct, using arbitrary precision if needed.
  *
  * @param fast If set, skip arbitrary precision and return an estimate.
  * @return Zero or an arbitrary number with sign matching the determinant. */

export function detSign(a1: number, b1: number, b2: number, a2: number, fast?: boolean) {
	const a = a1 * a2;
	const b = b1 * b2;

	let result = +(a > b) - +(a < b);

	if(!result && !fast) {
		// If a and b seem equal, check again using arbitrary precision math.
		result = new BigFloat(a1).mul(a2).deltaFrom(new BigFloat(b1).mul(b2));
	}

	// Return Math.sign(a - b)
	return(result);
}

/** Comparison function for sorting lines by angle.
  * Always correct, using arbitrary precision if needed.
  *
  * @param fast If set, skip arbitrary precision and return an estimate.
  * @return Zero or an arbitrary number with sign matching the sorting order. */

export function angleDeltaFrom(x1: number, y1: number, x2: number, y2: number, fast?: boolean) {
	const d1 = x1 > y1 ? 1 : 0;
	const d2 = x2 > y2 ? 1 : 0;
	const a1 = x1 > -y1 ? 1 : 0;
	const a2 = x2 > -y2 ? 1 : 0;

	// Compare quadrants of both angles.
	const qa = d1 * 2 + a1;
	const qb = d2 * 2 + a2;

	if(qa != qb) return((0x6c >> qa * 2 & 6) - (0x6c >> qb * 2 & 6));

	return(d1 ^ a1 ?
		detSign(-x1, -y1, x2, y2, fast) :
		detSign( x2,  y2, x1, y1, fast)
	);
}
