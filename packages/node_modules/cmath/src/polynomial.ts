// This file is part of cmath, copyright (c) 2017-2018 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

const sqrt3 = Math.sqrt(3);

export function cuberoot(x: number) {
	if(x < 0) return(-Math.pow(-x, 1/3));

	return(Math.pow(x, 1/3));
}

/** Get real roots of quadratic polynomial a*x^2 + b*x + c. */

export function solveQuad(a: number, b: number, c: number) {
	if(!a) return(b ? [ -c / b ] : []);

	// Normalize to monic polynomial and get discriminant.
	b /= 2 * a;
	let d = b * b - c / a;

	if(d > 0) {
		// For positive discriminant, two real roots.
		d = Math.sqrt(d);

		return([
			-b - d,
			-b + d
		]);
	}

	// For zero discriminant, one double root. Otherwise no real roots.
	return(d ? [] : [-b]);
}

/** Test if quadratic polynomial a*x^2 + b*x + c has roots between 0 <= x <= 1. */

export function testQuad(a: number, b: number, c: number) {
	// Test if x=0 is a root.
	if(!c) return(true);

	// Handle linear polynomial.
	if(!a) {
		if(b > 0) {
			return(c <= 0 && c >= -b);
		} else if(b < 0) {
			return(c >= 0 && c <= -b);
		}

		return(false);
	}

	// For negative discriminant, no real roots.
	if(b * b < 4 * a * c) return(false);

	if(a < 0) {
		a = -a;
		b = -b;
		c = -c;
	}

	const aab = a + a + b;
	const abc = a + b + c;

	// Test if 0 <= (-b + sqrt(b*b - 4ac)) / 2a <= 1
	if(aab >= 0 && abc >= 0 && (c <= 0 || b <= 0)) return(true);

	// Test if 0 <= (-b - sqrt(b*b - 4ac)) / 2a <= 1
	if((aab >= 0 || abc <= 0) && c >= 0 && b <= 0) return(true);

	return(false);
}

/** Table counting sign flips in all possible combinations of
  * 4 minus, plus or zero signs, for Sturm root finding.
  * Signs are represented as bit pairs: 00 (+) 01 (-) 10 (0). */

const flipTbl: number[] = [];

// Populate flipTbl.

for(let i = 0; i < 256; ++i) {
	let s = 2;
	let n = i;
	let f: number;
	let count = 0;

	for(let j = 0; j < 4; ++j) {
		f = n & 3;
		if(s == 2) s = f;
		else if(f != 2 && f != s) {
			++count;
			s = f;
		}
		n >>= 2;
	}

	flipTbl[i] = count;
}

/** Test if cubic polynomial a*x^3 + b*x^2 + c*x + d has roots between 0 <= x <= 1. */

export function testCubic(a: number, b: number, c: number, d: number) {
	// Function's value at x=1.
	const y1 = a + b + c + d;

	// Get sign bits at x=0 and x=1.
	let sign0 = (d > 0 ? 0 : 1);
	let sign1 = (y1 > 0 ? 0 : 1);

	// If the sign changes between x=0 and x=1, there must be a root in between.
	if(sign0 != sign1) return(+1);

	// Check for roots at x=0 and x=1.
	if(!d || !y1) return(+3);

	// If a is zero, this is a quadratic polynomial.
	if(!a) return(testQuad(b, c, d) ? +2 : -2);

	// There must be zero or two roots between x=0 and x=1.
	// Check if the derivative has any zeroes inside that range. If not, there can be no roots.
	if(!testQuad(a * 3, b * 2, c)) return(-4);

	sign0 += d ? 0 : 1;

	// Descartes' rule of signs: number of positive roots equals number of sign changes
	// in polynomial terms.

	const flips = (
		(a ? 0 : 64) + (a > 0 ? 0 : 64) +
		(b ? 0 : 16) + (b > 0 ? 0 : 16) +
		(c ? 0 : 4) + (c > 0 ? 0 : 4) +
		sign0
	);

	// If there are less than two roots total, it's already known none are between 0 and 1.
	if(flipTbl[flips] < 2) return(-5);

	// There must be zero or two roots between x=0 and x=1.
	// We can use Sturm's theorem to find which is the case.

	// Calculation of temporary values has been optimized to remove divisions.
	// Only the signs matter.

	const c2 = 2*a*(b*b - 3*a*c);
	const d2 =   a*(b*c - 9*a*d);

	const d3 = d2*(2*b*c2 - 3*a*d2) - c*c2*c2;
	const cd = c2 + d2;
	const abc = 3*a + 2*b + c;

	const sign = (d3 ? 0 : 64) + (d3 > 0 ? 0 : 64);

	sign1 += y1 ? 0 : 1;

	/** Number of sign flips in Sturm sequence at x=0. */
	const flips0 = (
		sign +
		(d2 ? 0 : 16) + (d2 > 0 ? 0 : 16) +
		(c ? 0 : 4) + (c > 0 ? 0 : 4) +
		sign0
	);

	/** Number of sign flips in Sturm sequence at x=1. */
	const flips1 = (
		sign +
		(cd ? 0 : 16) + (cd > 0 ? 0 : 16) +
		(abc ? 0 : 4) + (abc > 0 ? 0 : 4) +
		sign1
	);

	return(flipTbl[flips0] != flipTbl[flips1] ? +6 : -6);
}

/** Get real roots of quadratic polynomial a*x^3 + b*x^2 + c*x + d.
  * See:
  * https://stackoverflow.com/a/27176424
  * https://stackoverflow.com/a/34804516 */

export function solveCubic(a: number, b: number, c: number, d: number) {
	if(!a) return(solveQuad(b, c, d));

	// Dividing b, c, d by a here would simplify formulas
	// but hurt numerical stability.

	a *= 3;

	// Apply offset to get a depressed cubic x^3 + c*x + d = 0
	const offset = -b/a;

	d = (3*a*a*d - 3*a*b*c + 2*b*b*b) / (a*a*a);
	c = (a*c - b*b) / (a*a);

	if(!c) return([ offset + cuberoot(-d) ]);

	if(!d) {
		if(c < 0) {
			c = Math.sqrt(-c * 3);
			return([ offset, offset - c, offset + c ]);
		}

		return([ offset ]);
	}

	d /= 2;
	const discriminant = d*d + c*c*c;

	if(discriminant >= 0) {
		if(discriminant < 1e-8) {
			d /= c;
			return([ offset - d, offset + d*2 ]);
		}

		d = cuberoot(-d - Math.sqrt(discriminant));
		return([ offset + d - c/d ]);
	}

	// Find 3 roots using polar coordinates.

	let len = Math.sqrt(-c);
	const angle = Math.acos(d / (c * len)) / 3;
	const cos = len * Math.cos(angle);
	const sin = len * Math.sin(angle) * sqrt3;

	return([
		offset - cos - sin,
		offset - cos + sin,
		offset + cos + cos
	]);
}
