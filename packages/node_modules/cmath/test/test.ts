import { testCubic, solveCubic, angleDeltaFrom } from '..';

const step = 1 / 32;
const countList = [ 0, 0, 0, 0, 0, 0 ];

for(let a = -1; a <= 1; a += step) {
	for(let b = -1; b <= 1; b += step) {
		for(let c = -1; c <= 1; c += step) {
			for(let d = -1; d <= 1; d += step) {
				let foundSolve = false;
				const roots = solveCubic(a, b, c, d);

				for(let x of roots) {
					if(x >= -5E-6 && x <= 1+5E-6) foundSolve = true;
				}

				const result = testCubic(a, b, c, d);
				const foundTest = result > 0;

				const method = Math.abs(result);

				++countList[method - 1];

				if(foundSolve != foundTest && (a || b || c || d)) {
					console.error('Root count mismatch:');
					console.error([a, b, c, d].join(' ') + ' ' + foundSolve + ' ' + foundTest + ' ' + method);
					console.error(roots);
				}
			}
		}
	}
}

console.log(countList.map((count) => ~~(count / (65*65*65*65) * 100 + 0.5) + '%').join(' '));

function getAngle(pt: { x: number, y: number }) {
	let angle = Math.atan2(pt.y, pt.x);

	if(angle < -Math.PI / 4) angle += Math.PI * 2;

	return(angle);
}

const pts: { x: number, y: number }[] = [];
let x, y;

for(let i = 0; i < 10000; ++i) {
	x = Math.random() * 2 - 1;
	y = Math.random() * 2 - 1;

	pts.push({ x, y });
}

const angles = pts.sort((a, b) => angleDeltaFrom(a.x, a.y, b.x, b.y)).map(getAngle);
const list1 = angles.join(',');
angles.sort((a: number, b: number) => a - b);
const list2 = angles.join(',');

if(list1 != list2) console.error('Error in angleDeltaFrom!');
