// This file is part of charto-clip, copyright (c) 2018 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import * as cgeo from 'cgeo';
import { BigFloat } from 'bigfloat';
import { angleDeltaFrom } from 'cmath';
import { BBox, BBoxLike } from 'charto-types';

/** Reference to part of a polyline.
  * For polygons sharing an edge, sometimes first > last. */

export interface StringRef {
	curve: cgeo.String;
	/** Index of starting point along the line string. */
	first?: number;
	/** Index of end point along the line string. */
	last?: number;
}

const enum ClipEventKind {
	enter,
	leave,
	corner
}

interface ClipEvent {
	kind: ClipEventKind;
	edge?: StringRef;

	x: number;
	y: number;
}

function clipEdgeBox(
	kind: ClipEventKind,
	edge: StringRef,
	bbox: BBoxLike,
	x1: number,
	y1: number,
	next: number,
	region: number
) {
	// We never insert or fetch line segments not intersecting the solid
	// box containing them, so a line segment to the next point must
	// intersect a box edge.

	let x2 = edge.curve.x[next];
	let y2 = edge.curve.y[next];
	let x: number;
	let y: number;

	if(region & 1) {
		x = y = 0;
	} else {
		x = y = 0;
	}

	return({ kind, edge, x, y });
}

export function clipSurfaceBox(edgeList: StringRef[], bbox: BBoxLike) {
	const eventList: ClipEvent[] = [
		{ kind: ClipEventKind.corner, x: bbox.s, y: bbox.w },
		{ kind: ClipEventKind.corner, x: bbox.n, y: bbox.w },
		{ kind: ClipEventKind.corner, x: bbox.n, y: bbox.e },
		{ kind: ClipEventKind.corner, x: bbox.s, y: bbox.e },
	];
	const output: StringRef[] = [];
	let region: number;
	let x: number;
	let y: number;

	for(let edge of edgeList) {
		x = edge.curve.x[edge.first!];
		y = edge.curve.y[edge.first!];
		region = BBox.getRegion(x, y, bbox);

		// If the first point is inside the box, assume a closed curve entirely inside it.
		if(!region) {
			output.push(edge);
			continue;
		}

		// Add event for the curve entering the box.
		eventList.push(clipEdgeBox(ClipEventKind.enter, edge, bbox, x, y, edge.first! + 1, region));

		x = edge.curve.x[edge.last!];
		y = edge.curve.y[edge.last!];
		region = BBox.getRegion(x, y, bbox);

		// Add event for the curve leaving the box.
		eventList.push(clipEdgeBox(ClipEventKind.leave, edge, bbox, x, y, edge.last! - 1, region));

		// console.log(region);
	}

	eventList.sort((a: ClipEvent, b: ClipEvent) => {
		let result = angleDeltaFrom(a.x, a.y, b.x, b.y, true);

		if(!result) {
			// ...
		}

		return(result);
	})
}
