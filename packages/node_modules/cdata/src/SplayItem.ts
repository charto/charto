// This file is part of cdata, copyright (c) 2012, 2013, 2018 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

export class SplayItem<Key> {

	constructor(public key: Key) {}

	rotateLeft() {
		const top = this.right!;

		this.right = top.left;
		if(this.right) this.right.parent = this;
		top.left = this;

		if(this.parent) {
			if(this.parent.left == this) this.parent.left = top;
			else this.parent.right = top;
		}

		top.parent = this.parent;
		this.parent = top;
	}

	rotateRight() {
		const top = this.left!;

		this.left = top.right;
		if(this.left) this.left.parent = this;
		top.right = this;

		if(this.parent) {
			if(this.parent.left == this) this.parent.left = top;
			else this.parent.right = top;
		}

		top.parent = this.parent;
		this.parent = top;
	};

	/** Splay this node to the root of the splay tree. */

	splay() {
		let node = this;
		let grand: SplayItem<Key> | null | undefined;
		let parent: SplayItem<Key>;

		while(node.parent) {
			parent = node.parent;
			grand = parent.parent;

			if(!grand) {
				if(node == parent.left) parent.rotateRight();
				else parent.rotateLeft();
				return(this);
			}

			if(node == parent.left) {
				if(parent == grand.left) {
					grand.rotateRight();
					parent.rotateRight();
				} else {
					parent.rotateRight();
					grand.rotateLeft();
				}
			} else {
				if(parent == grand.left) {
					parent.rotateLeft();
					grand.rotateRight();
				} else {
					grand.rotateLeft();
					parent.rotateLeft();
				}
			}
		}

		return(this);
	}

	link(prev?: SplayItem<Key> | null, next?: SplayItem<Key> | null) {
		this.prev = prev;
		this.next = next;

		if(prev) prev.next = this;
		if(next) next.prev = this;

		return(this);
	}

	parent?: SplayItem<Key> | null;
	left?: SplayItem<Key> | null;
	right?: SplayItem<Key> | null;
	prev?: SplayItem<Key> | null;
	next?: SplayItem<Key> | null;

}
