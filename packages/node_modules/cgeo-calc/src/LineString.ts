// This file is part of cgeo-calc, copyright (c) 2017 BusFaster Ltd.
// Released under the MIT license, see LICENSE.

import * as cgeo from 'cgeo';

@cgeo.mixin()
export class LineString extends cgeo.LineString {

	getFilledArea() {
		let area = 0;
		let xPrev: number, yPrev: number;

		let pos = this.x.length - 1;
		let x = this.x[pos];
		let y = this.y[pos];

		while(pos--) {
			xPrev = x;
			yPrev = y;
			x = this.x[pos];
			y = this.y[pos];

			area += xPrev * y - x * yPrev;
		}

		return(area / 2);
	}

	/** Polyline centroid is a sum of segment centroids weighted by their lengths. */

	updateSimpleCentroid(result: cgeo.Point) {
		let length = 0, l: number;
		let xSum = 0, ySum = 0;
		let xPrev: number, yPrev: number;
		let dx: number, dy: number;

		let pos = this.x.length - 1;
		let x = this.x[pos];
		let y = this.y[pos];

		while(pos--) {
			xPrev = x;
			yPrev = y;
			x = this.x[pos];
			y = this.y[pos];

			dx = x - xPrev;
			dy = y - yPrev;
			l = Math.sqrt(dx * dx + dy * dy);

			// Add weighted segment centroid to sum.
			// Handle dividing by 2 after the loop.
			length += l;
			xSum += (xPrev + x) * l;
			ySum += (yPrev + y) * l;
		}

		// For faster segment centroids, divide the sum instead of individual coordinates.
		// Doubling the weight instead would only make sense for straight lines.
		result.x += xSum / 2;
		result.y += ySum / 2;
		result.weight! += length;
	}

	updateFilledCentroid(result: cgeo.Point, sign: number) {
		let area = 0, a: number;
		let xSum = 0, ySum = 0;
		let xPrev: number, yPrev: number;

		let pos = this.x.length - 1;
		let x = this.x[pos];
		let y = this.y[pos];

		while(pos--) {
			xPrev = x;
			yPrev = y;
			x = this.x[pos];
			y = this.y[pos];

			a = y * xPrev - x * yPrev;

			area += a;
			xSum += a * (x + xPrev);
			ySum += a * (y + yPrev);
		}

		if(area < 0) sign = -sign;

		result.weight! += sign * area / 2;
		result.x += sign * xSum / 6;
		result.y += sign * ySum / 6;
	}

}
